service: try-serverless-framework
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1

  vpc:
    securityGroupIds:
      - ${self:custom.otherfile.environment.${self:provider.stage}.LAMBDA_VPC_SECURITY_GROUP}
    subnetIds:
      - ${self:custom.otherfile.environment.${self:provider.stage}.LAMBDA_VPC_SUBNET_ID}

  iam:
    role: tryServerlessFrameworkLambdaRole

functions:
  hello:
    handler: handler.hello
    environment:
      CONFIG: ${self:custom.otherfile.environment.${self:provider.stage}.CONFIG}

custom:
  defaultStage: dev
  otherfile:
    environment:
      dev: ${file(./config/dev.yml)}
      prd: ${file(./config/prd.yml)}

resources:
  Resources:
    tryServerlessFrameworkLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: try-serverless-framework-${opt:stage, self:provider.stage}-lambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
          - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
          - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: try-serverless-framework-${opt:stage, self:provider.stage}-image-buckets
plugins:
  - serverless-offline
